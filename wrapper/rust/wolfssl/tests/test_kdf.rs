use wolfssl::wolfcrypt::hmac::HMAC;
use wolfssl::wolfcrypt::kdf::*;
use wolfssl_sys as ws;

#[test]
fn test_tls13_hkdf_extract_expand() {
    let hash_hello1 = [
        0x63u8, 0x83, 0x58, 0xab, 0x36, 0xcd, 0x0c, 0xf3,
        0x26, 0x07, 0xb5, 0x5f, 0x0b, 0x8b, 0x45, 0xd6,
        0x7d, 0x5b, 0x42, 0xdc, 0xa8, 0xaa, 0x06, 0xfb,
        0x20, 0xa5, 0xbb, 0x85, 0xdb, 0x54, 0xd8, 0x8b
    ];
    let client_early_traffic_secret = [
        0x20u8, 0x18, 0x72, 0x7c, 0xde, 0x3a, 0x85, 0x17, 0x72, 0xdc, 0xd7, 0x72,
        0xb0, 0xfc, 0x45, 0xd0, 0x62, 0xb9, 0xbb, 0x38, 0x69, 0x05, 0x7b, 0xb4,
        0x5e, 0x58, 0x5d, 0xed, 0xcd, 0x0b, 0x96, 0xd3
    ];

    let mut secret = [0u8; ws::WC_SHA256_DIGEST_SIZE as usize];

    tls13_hkdf_extract(HMAC::TYPE_SHA256, None, None, &mut secret).expect("Error with tls13_hkdf_extract()");

    let protocol_label = b"tls13 ";
    let ce_traffic_label = b"c e traffic";
    let mut expand_out = [0u8; ws::WC_SHA256_DIGEST_SIZE as usize];

    tls13_hkdf_expand_label(HMAC::TYPE_SHA256, &secret,
        protocol_label, ce_traffic_label,
        &hash_hello1, &mut expand_out).expect("Error with tls13_hkdf_expand_label()");

    assert_eq!(expand_out, client_early_traffic_secret);
}

#[test]
fn test_ssh_kdf() {
    let ssh_kdf_set3_k = [
        0x6Au8, 0xC3, 0x82, 0xEA, 0xAC, 0xA0, 0x93, 0xE1,
        0x25, 0xE2, 0x5C, 0x24, 0xBE, 0xBC, 0x84, 0x64,
        0x0C, 0x11, 0x98, 0x75, 0x07, 0x34, 0x4B, 0x5C,
        0x73, 0x9C, 0xEB, 0x84, 0xA9, 0xE0, 0xB2, 0x22,
        0xB9, 0xA8, 0xB5, 0x1C, 0x83, 0x9E, 0x5E, 0xBE,
        0x49, 0xCF, 0xAD, 0xBF, 0xB3, 0x95, 0x99, 0x76,
        0x4E, 0xD5, 0x22, 0x09, 0x9D, 0xC9, 0x12, 0x75,
        0x19, 0x50, 0xDC, 0x7D, 0xC9, 0x7F, 0xBD, 0xC0,
        0x63, 0x28, 0xB6, 0x8F, 0x22, 0x78, 0x1F, 0xD3,
        0x15, 0xAF, 0x56, 0x80, 0x09, 0xA5, 0x50, 0x9E,
        0x5B, 0x87, 0xA1, 0x1B, 0xF5, 0x27, 0xC0, 0x56,
        0xDA, 0xFF, 0xD8, 0x2A, 0xB6, 0xCB, 0xC2, 0x5C,
        0xCA, 0x37, 0x14, 0x34, 0x59, 0xE7, 0xBC, 0x63,
        0xBC, 0xDE, 0x52, 0x75, 0x7A, 0xDE, 0xB7, 0xDF,
        0x01, 0xCF, 0x12, 0x17, 0x3F, 0x1F, 0xEF, 0x81,
        0x02, 0xEC, 0x5A, 0xB1, 0x42, 0xC2, 0x13, 0xDD,
        0x9D, 0x30, 0x69, 0x62, 0x78, 0xA8, 0xD8, 0xBC,
        0x32, 0xDD, 0xE9, 0x59, 0x2D, 0x28, 0xC0, 0x78,
        0xC6, 0xD9, 0x2B, 0x94, 0x7D, 0x82, 0x5A, 0xCA,
        0xAB, 0x64, 0x94, 0x84, 0x6A, 0x49, 0xDE, 0x24,
        0xB9, 0x62, 0x3F, 0x48, 0x89, 0xE8, 0xAD, 0xC3,
        0x8E, 0x8C, 0x66, 0x9E, 0xFF, 0xEF, 0x17, 0x60,
        0x40, 0xAD, 0x94, 0x5E, 0x90, 0xA7, 0xD3, 0xEE,
        0xC1, 0x5E, 0xFE, 0xEE, 0x78, 0xAE, 0x71, 0x04,
        0x3C, 0x96, 0x51, 0x11, 0x03, 0xA1, 0x6B, 0xA7,
        0xCA, 0xF0, 0xAC, 0xD0, 0x64, 0x2E, 0xFD, 0xBE,
        0x80, 0x99, 0x34, 0xFA, 0xA1, 0xA5, 0xF1, 0xBD,
        0x11, 0x04, 0x36, 0x49, 0xB2, 0x5C, 0xCD, 0x1F,
        0xEE, 0x2E, 0x38, 0x81, 0x5D, 0x4D, 0x5F, 0x5F,
        0xC6, 0xB4, 0x10, 0x29, 0x69, 0xF2, 0x1C, 0x22,
        0xAE, 0x1B, 0x0E, 0x7D, 0x36, 0x03, 0xA5, 0x56,
        0xA1, 0x32, 0x62, 0xFF, 0x62, 0x8D, 0xE2, 0x22
    ];
    let ssh_kdf_set3_h = [
        0x7B, 0x70, 0x01, 0x18, 0x5E, 0x25, 0x6D, 0x44,
        0x93, 0x44, 0x5F, 0x39, 0xA5, 0x5F, 0xB9, 0x05,
        0xE6, 0x32, 0x1F, 0x4B, 0x5D, 0xD8, 0xBB, 0xF3,
        0x10, 0x0D, 0x51, 0xBA, 0x0B, 0xDA, 0x3D, 0x2D
    ];
    let ssh_kdf_set3_sid = [
        0x7B, 0x70, 0x01, 0x18, 0x5E, 0x25, 0x6D, 0x44,
        0x93, 0x44, 0x5F, 0x39, 0xA5, 0x5F, 0xB9, 0x05,
        0xE6, 0x32, 0x1F, 0x4B, 0x5D, 0xD8, 0xBB, 0xF3,
        0x10, 0x0D, 0x51, 0xBA, 0x0B, 0xDA, 0x3D, 0x2D
    ];
    let ssh_kdf_set3_a = [
        0x81, 0xF0, 0x33, 0x0E, 0xF6, 0xF0, 0x53, 0x61,
        0xB3, 0x82, 0x3B, 0xFD, 0xED, 0x6E, 0x1D, 0xE9
    ];

    let mut out = [0u8; 16];

    ssh_kdf(HMAC::TYPE_SHA256, b'A', &ssh_kdf_set3_k, &ssh_kdf_set3_h,
        &ssh_kdf_set3_sid, &mut out).expect("Error with ssh_kdf()");

    assert_eq!(out, ssh_kdf_set3_a);
}
